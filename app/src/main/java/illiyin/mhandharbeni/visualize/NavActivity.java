package illiyin.mhandharbeni.visualize;import android.Manifest;import android.content.Context;import android.content.Intent;import android.content.IntentSender;import android.content.pm.PackageManager;import android.location.LocationManager;import android.os.Build;import android.os.Bundle;import android.support.annotation.NonNull;import android.support.design.widget.NavigationView;import android.support.v4.app.ActivityCompat;import android.support.v4.app.FragmentTransaction;import android.support.v4.content.ContextCompat;import android.support.v4.view.GravityCompat;import android.support.v4.widget.DrawerLayout;import android.support.v7.app.ActionBarDrawerToggle;import android.support.v7.app.AppCompatActivity;import android.support.v7.widget.Toolbar;import android.text.Html;import android.text.Spanned;import android.util.Log;import android.view.Menu;import android.view.MenuItem;import android.view.View;import android.view.WindowManager;import android.widget.EditText;import android.widget.ImageView;import android.widget.TextView;import android.widget.Toast;import com.afollestad.materialdialogs.DialogAction;import com.afollestad.materialdialogs.MaterialDialog;import com.bumptech.glide.Glide;import com.google.android.gms.ads.MobileAds;import com.google.android.gms.common.api.*;import com.google.android.gms.location.*;import com.google.android.gms.tasks.Task;import com.google.firebase.crash.FirebaseCrash;import java.util.ArrayList;import java.util.List;import illiyin.mhandharbeni.databasemodule.AdapterModel;import illiyin.mhandharbeni.databasemodule.ChatModel;import illiyin.mhandharbeni.databasemodule.ContactModel;import illiyin.mhandharbeni.databasemodule.GrupModel;import illiyin.mhandharbeni.databasemodule.MemberLocationModel;import illiyin.mhandharbeni.databasemodule.MemberModel;import illiyin.mhandharbeni.realmlibrary.Crud;import illiyin.mhandharbeni.servicemodule.ServiceAdapter;import illiyin.mhandharbeni.sessionlibrary.Session;import illiyin.mhandharbeni.sessionlibrary.SessionListener;import illiyin.mhandharbeni.visualize.navpackage.mainnav.ImageProfile;import illiyin.mhandharbeni.visualize.navpackage.mainnav.MainNav;public class NavActivity extends AppCompatActivity        implements NavigationView.OnNavigationItemSelectedListener {    private GoogleApiClient googleApiClient;    final static int REQUEST_LOCATION = 199;    String[] permissions = new String[]{            Manifest.permission_group.LOCATION,            Manifest.permission_group.STORAGE,            Manifest.permission.ACCESS_FINE_LOCATION,            Manifest.permission.ACCESS_COARSE_LOCATION,            Manifest.permission.ACCESS_NETWORK_STATE,            Manifest.permission.INTERNET,            Manifest.permission.WRITE_EXTERNAL_STORAGE,            Manifest.permission.WRITE_GSERVICES,            Manifest.permission.ACCESS_WIFI_STATE,            Manifest.permission.READ_EXTERNAL_STORAGE    };    private static final String TAG = "NavActivity";    private Toolbar toolbar;    private NavigationView navigationView;    private Session session;    private Crud crud;    private AdapterModel adapterModel;    private MaterialDialog dialogGrup, dialogContact, dialogPassword, dialogProfile, dialogGuideLines;    private ServiceAdapter serviceAdapter;    private int REQUEST_CHECK_SETTINGS = 123;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(illiyin.mhandharbeni.visualize.R.layout.activity_nav);    }    @Override    protected void onStart() {        super.onStart();        checkPermissions();        fetch_modul();        fetch_services();        fetch_toolbar();        fetch_flags();        fetch_menu();        init_first();        fill_information_user();        if (!session.getToken().equalsIgnoreCase("nothing")){//            turnGPSOn();            checkGps();        }    }    private void checkGps(){        final LocationManager manager = (LocationManager) NavActivity.this.getSystemService(Context.LOCATION_SERVICE);        assert manager != null;        if (!manager.isProviderEnabled(LocationManager.GPS_PROVIDER) && hasGPSDevice(NavActivity.this)) {            enableLoc();        }    }    private boolean hasGPSDevice(Context context){        final LocationManager mgr = (LocationManager) context.getSystemService(LOCATION_SERVICE);        if (mgr == null)            return false;        final List<String> providers = mgr.getAllProviders();        if(providers == null)            return false;        return providers.contains(LocationManager.GPS_PROVIDER);    }    private void enableLoc() {        if (googleApiClient == null) {            googleApiClient = new GoogleApiClient.Builder(NavActivity.this)                    .addApi(LocationServices.API)                    .addConnectionCallbacks(new GoogleApiClient.ConnectionCallbacks() {                        @Override                        public void onConnected(Bundle bundle) {                        }                        @Override                        public void onConnectionSuspended(int i) {                            googleApiClient.connect();                        }                    })                    .addOnConnectionFailedListener(connectionResult -> FirebaseCrash.log(connectionResult.getErrorMessage())).build();            googleApiClient.connect();            LocationRequest locationRequest = LocationRequest.create();            locationRequest.setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY);            locationRequest.setInterval(30 * 1000);            locationRequest.setFastestInterval(5 * 1000);            LocationSettingsRequest.Builder builder = new LocationSettingsRequest.Builder()                    .addLocationRequest(locationRequest);            builder.setAlwaysShow(true);            builder.setNeedBle(true);            Task<LocationSettingsResponse> result =                    LocationServices.getSettingsClient(this).checkLocationSettings(builder.build());            result.addOnCompleteListener(task -> {                try {                    LocationSettingsResponse response = task.getResult(ApiException.class);                } catch (ApiException exception) {                    FirebaseCrash.report(exception);                    switch (exception.getStatusCode()) {                        case LocationSettingsStatusCodes.RESOLUTION_REQUIRED:                            try {                                ResolvableApiException resolvable = (ResolvableApiException) exception;                                resolvable.startResolutionForResult(                                        NavActivity.this,                                        REQUEST_CHECK_SETTINGS);                            } catch (IntentSender.SendIntentException | ClassCastException e) {                                FirebaseCrash.report(e);                            }                            break;                        case LocationSettingsStatusCodes.SETTINGS_CHANGE_UNAVAILABLE:                            // Location settings are not satisfied. However, we have no way to fix the                            // settings so we won't show the dialog.                            break;                    }                }            });        }    }    private void fetch_flags(){        WindowManager.LayoutParams attributes = getWindow().getAttributes();        attributes.flags |= WindowManager.LayoutParams.FLAG_LAYOUT_IN_SCREEN | WindowManager.LayoutParams.FLAG_LAYOUT_NO_LIMITS;        getWindow().setAttributes(attributes);        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {            getWindow().setFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_NAVIGATION, WindowManager.LayoutParams.FLAG_TRANSLUCENT_NAVIGATION);        }    }    private void fetch_services(){        serviceAdapter = new ServiceAdapter(getApplicationContext());        serviceAdapter.startService();    }    private void init_first(){        FragmentTransaction ft = getSupportFragmentManager().beginTransaction();        ft.replace(illiyin.mhandharbeni.visualize.R.id.navframe, new MainNav());        ft.commit();    }    private void fetch_toolbar(){        toolbar = (Toolbar) findViewById(illiyin.mhandharbeni.visualize.R.id.toolbar);        setSupportActionBar(toolbar);    }    private void fetch_menu(){        DrawerLayout drawer = (DrawerLayout) findViewById(illiyin.mhandharbeni.visualize.R.id.drawer_layout);        ActionBarDrawerToggle toggle = new ActionBarDrawerToggle(                this, drawer, toolbar, illiyin.mhandharbeni.visualize.R.string.navigation_drawer_open, illiyin.mhandharbeni.visualize.R.string.navigation_drawer_close);        drawer.addDrawerListener(toggle);        toggle.syncState();        navigationView = (NavigationView) findViewById(illiyin.mhandharbeni.visualize.R.id.nav_view);        navigationView.setNavigationItemSelectedListener(this);    }    private void fill_information_user(){        View headerView = navigationView.getHeaderView(0);        ImageView headerimage = headerView.findViewById(illiyin.mhandharbeni.visualize.R.id.headerimage);        TextView headername = headerView.findViewById(illiyin.mhandharbeni.visualize.R.id.headername);        TextView headerphone = headerView.findViewById(illiyin.mhandharbeni.visualize.R.id.headerphone);        String name = session.getCustomParams(Session.NAMA, "nothing");        String phone = session.getCustomParams(Session.NOTELP, "nothing");        String image = session.getCustomParams(Session.IMAGE, "http://enadcity.org/enadcity/wp-content/uploads/2017/02/profile-pictures.png");        try {            Glide.with(this).load(image).into(headerimage);        }catch (Exception e){            FirebaseCrash.report(e);        }        headername.setText(name);        headerphone.setText(phone);        headerimage.setOnClickListener(v -> showProfileImage());    }    private void fetch_modul(){        MobileAds.initialize(this, getString(R.string.admobid));        AdView adView = new AdView(this);        adView.setAdSize(AdSize.BANNER);        adView.setAdUnitId(R.string.admobunit);        session = new Session(getApplicationContext(), () -> fill_information_user());        adapterModel = new AdapterModel(getApplicationContext());        GrupModel grupModel = new GrupModel();        crud = new Crud(getApplicationContext(), grupModel);    }    @Override    public void onBackPressed() {        DrawerLayout drawer = (DrawerLayout) findViewById(illiyin.mhandharbeni.visualize.R.id.drawer_layout);        if (drawer.isDrawerOpen(GravityCompat.START)) {            drawer.closeDrawer(GravityCompat.START);        } else {            super.onBackPressed();        }    }    @Override    public boolean onCreateOptionsMenu(Menu menu) {        getMenuInflater().inflate(illiyin.mhandharbeni.visualize.R.menu.nav, menu);        return true;    }    @Override    public boolean onOptionsItemSelected(MenuItem item) {        int id = item.getItemId();        if (id == illiyin.mhandharbeni.visualize.R.id.add_group) {            modalAddGrup();            return true;        }else if(id == illiyin.mhandharbeni.visualize.R.id.add_contact){            modalAddContact();            return true;        }        return super.onOptionsItemSelected(item);    }    @SuppressWarnings("StatementWithEmptyBody")    @Override    public boolean onNavigationItemSelected(MenuItem item) {        // Handle navigation view item clicks here.        int id = item.getItemId();        if (id == illiyin.mhandharbeni.visualize.R.id.nav_logout){            /*do logout*/            crud.deleteAll(GrupModel.class);            crud.deleteAll(ContactModel.class);            crud.deleteAll(ChatModel.class);            crud.deleteAll(MemberModel.class);            crud.deleteAll(MemberLocationModel.class);            session.deleteSession();            startActivity(new Intent(NavActivity.this, MainActivity.class));            finish();        }else if (id == illiyin.mhandharbeni.visualize.R.id.add_group){            modalAddGrup();        }else if(id == illiyin.mhandharbeni.visualize.R.id.add_contact){            modalAddContact();        }else if(id == illiyin.mhandharbeni.visualize.R.id.nav_update_profile){            modalChangeProfile();        }else if(id == illiyin.mhandharbeni.visualize.R.id.nav_update_password){            modalChangePassword();        }else if(id == illiyin.mhandharbeni.visualize.R.id.nav_guideline){            modalGuideline();        }        DrawerLayout drawer = (DrawerLayout) findViewById(illiyin.mhandharbeni.visualize.R.id.drawer_layout);        drawer.closeDrawer(GravityCompat.START);        return true;    }    private void modalAddGrup(){        dialogGrup = new MaterialDialog.Builder(this)                .title(illiyin.mhandharbeni.visualize.R.string.placeholder_hintcreategrup)                .customView(illiyin.mhandharbeni.visualize.R.layout.__navactivity_mainnav_addgroup, true)                .positiveText(illiyin.mhandharbeni.visualize.R.string.placeholder_buttoncreategrup)                .onPositive((dialog, which) -> addGrup())                .build();        dialogGrup.show();    }    private void addGrup(){        View v = dialogGrup.getCustomView();        assert v != null;        EditText nama = v.findViewById(illiyin.mhandharbeni.visualize.R.id.namagrup);        EditText masaaktif = v.findViewById(illiyin.mhandharbeni.visualize.R.id.masaaktifgrup);        try {            String response = adapterModel.create_grup(nama.getText().toString(), masaaktif.getText().toString());            Log.d(TAG, "addGrup: "+response);        } catch (Exception e) {            FirebaseCrash.report(e);        }    }    private void modalAddContact(){        dialogContact = new MaterialDialog.Builder(this)                .title(illiyin.mhandharbeni.visualize.R.string.placeholder_hintaddcontact)                .customView(illiyin.mhandharbeni.visualize.R.layout.__navactivity_mainnav_addcontact, true)                .positiveText(illiyin.mhandharbeni.visualize.R.string.placeholder_buttonaddcontact)                .onPositive((dialog, which) -> addContact())                .build();        dialogContact.show();    }    private void addContact(){        View v = dialogContact.getCustomView();        assert v != null;        EditText notelp = v.findViewById(illiyin.mhandharbeni.visualize.R.id.notelpcontact);        try {            adapterModel.add_contact(notelp.getText().toString());        } catch (Exception e) {            FirebaseCrash.report(e);        }    }    private void modalChangePassword(){        dialogPassword = new MaterialDialog.Builder(this)                .title("Change Password")                .customView(illiyin.mhandharbeni.visualize.R.layout.__nacactivity_mainnav_changepassword, true)                .positiveText("Change")                .onPositive(new MaterialDialog.SingleButtonCallback() {                    @Override                    public void onClick(@NonNull MaterialDialog dialog, @NonNull DialogAction which) {                        try {                            changePassword();                        } catch (Exception e) {                            FirebaseCrash.report(e);                        }                    }                })                .build();        dialogPassword.show();    }    private void changePassword() throws Exception {        View v = dialogPassword.getCustomView();        assert v != null;        EditText oldpassword = v.findViewById(illiyin.mhandharbeni.visualize.R.id.oldpassword);        EditText newpassword = v.findViewById(illiyin.mhandharbeni.visualize.R.id.newpassword);        EditText repeatpassword = v.findViewById(illiyin.mhandharbeni.visualize.R.id.repeatpassword);        if (newpassword.getText().toString().equalsIgnoreCase(repeatpassword.getText().toString())){            String ubahPassword = adapterModel.change_password(oldpassword.getText().toString(), newpassword.getText().toString());            Toast.makeText(this, ubahPassword, Toast.LENGTH_SHORT).show();            Toast.makeText(this, "Silakan Login Kembali", Toast.LENGTH_SHORT).show();            serviceAdapter.stopService();            crud.deleteAll(GrupModel.class);            crud.deleteAll(ContactModel.class);            crud.deleteAll(ChatModel.class);            crud.deleteAll(MemberModel.class);            crud.deleteAll(MemberLocationModel.class);            session.deleteSession();            startActivity(new Intent(NavActivity.this, MainActivity.class));            finish();        }else{            Toast.makeText(this, "Password Tidak Sama", Toast.LENGTH_SHORT).show();        }    }    private void modalChangeProfile(){        dialogProfile = new MaterialDialog.Builder(this)                .title("Change Profile")                .customView(illiyin.mhandharbeni.visualize.R.layout.__navactivity_mainnav_updateprofile, true)                .positiveText("Change")                .onPositive(new MaterialDialog.SingleButtonCallback() {                    @Override                    public void onClick(@NonNull MaterialDialog dialog, @NonNull DialogAction which) {                        try {                            changeProfile();                        } catch (Exception e) {                            FirebaseCrash.report(e);                        }                    }                })                .build();        dialogProfile.show();        View v = dialogProfile.getCustomView();        assert v != null;        EditText nama = v.findViewById(illiyin.mhandharbeni.visualize.R.id.nama);        EditText alamat = v.findViewById(illiyin.mhandharbeni.visualize.R.id.alamat);        EditText notelp = v.findViewById(illiyin.mhandharbeni.visualize.R.id.notelp);        nama.setText(session.getCustomParams(Session.NAMA, "nothing"));        alamat.setText(session.getCustomParams(Session.ALAMAT, "nothing"));        notelp.setText(session.getCustomParams(Session.NOTELP, "nothing"));    }    private void modalGuideline(){        dialogGuideLines = new MaterialDialog.Builder(this)                .title("Guide line")                .customView(illiyin.mhandharbeni.visualize.R.layout.__layout_mainnav_guidelines, true)                .positiveText("Ok")                .build();        dialogGuideLines.show();        View v =  dialogGuideLines.getCustomView();        assert v != null;        TextView textView = v.findViewById(illiyin.mhandharbeni.visualize.R.id.textView);        Spanned sp = Html.fromHtml( getString(illiyin.mhandharbeni.visualize.R.string.placeholder_guidelines));        textView.setText(sp);    }    private void changeProfile() throws Exception {        View v = dialogProfile.getCustomView();        assert v != null;        EditText nama = v.findViewById(illiyin.mhandharbeni.visualize.R.id.nama);        EditText alamat = v.findViewById(illiyin.mhandharbeni.visualize.R.id.alamat);        EditText notelp = v.findViewById(illiyin.mhandharbeni.visualize.R.id.notelp);//        EditText username = v.findViewById(R.id.username);        String updateprofile = adapterModel.updateprofile(nama.getText().toString(), alamat.getText().toString(), notelp.getText().toString()/*, username.getText().toString()*/);        session.setCustomParams(Session.NAMA, nama.getText().toString());        session.setCustomParams(Session.ALAMAT, alamat.getText().toString());        session.setCustomParams(Session.NOTELP, notelp.getText().toString());        session.setCustomParams(Session.EMAIL, notelp.getText().toString());        Toast.makeText(this, updateprofile, Toast.LENGTH_SHORT).show();    }    private void showProfileImage(){        startActivity(new Intent(NavActivity.this, ImageProfile.class));    }    private boolean checkPermissions() {        int result;        List<String> listPermissionsNeeded = new ArrayList<>();        for (String p : permissions) {            result = ContextCompat.checkSelfPermission(this, p);            if (result != PackageManager.PERMISSION_GRANTED) {                listPermissionsNeeded.add(p);            }        }        if (!listPermissionsNeeded.isEmpty()) {            ActivityCompat.requestPermissions(this, listPermissionsNeeded.toArray(new String[listPermissionsNeeded.size()]), 100);            return false;        }        return true;    }}